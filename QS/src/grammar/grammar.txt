#语法文件,请勿删除！！！
Start -> Module
Module -> ModuleDefine ModuleStmts
ModuleDefine ->  ModuleSelfDefine | ModuleSelfDefine ModuleImportDefineList | ModuleSelfDefine ModuleExportList | ModuleSelfDefine ModuleImportDefineList ModuleExportList
ModuleSelfDefine -> AT MODULE COLON ID SEMI
ModuleImportDefineList -> ModuleImportDefineList ModuleImportDefine | ModuleImportDefine
ModuleImportDefine -> IMPORT COLON ID SEMI
ModuleExportList -> ModuleExportList ModuleExport | ModuleExport
ModuleExport ->  EXPORT COLON ID SEMI
ModuleStmts -> ModuleStmts VariableDef | ModuleStmts FunDefStmt  | FunDefStmt | VariableDef | E
# 函数定义语句，包含静态函数与普通函数
FunDefStmt -> FunDef | STATIC FunDef
# 所有函数定义，不区分静态或普通
FunDef -> FUN ID LEFT_PAREN ParamList RIGHT_PAREN BlockStmt
ParamList -> ID | ParamList COMMA ID | E

Stmts -> Stmts Stmt | E
Stmt -> InnerFunDefStmt | IfStmt | BlockStmt | VariableDef | WhileStmt | ReturnStmt | AssignStmt | Exp SEMI
BlockStmt -> LEFT_BRACE Stmts RIGHT_BRACE

# 变量定义包括普通变量与静态变量定义
VariableDef -> STATIC VarDefStmt | VarDefStmt
# 所有变量的定义语句，对变量类型不加区分
VarDefStmt -> LET ID ASSIGN Exp SEMI | LET ID SEMI

# 用于处理所有的变量表达式
VariableExp -> IDExp ArraySub | IDExp
IDExp -> ID | ID DOT IDExp | AT IDExp | ID MODULE_SCOPE IDExp

# 内部函数
InnerFunDefStmt -> AT FunDef

IfStmt -> IF LEFT_PAREN Exp RIGHT_PAREN Stmt | IfStmt ELSE Stmt
WhileStmt -> WHILE LEFT_PAREN Exp RIGHT_PAREN Stmt
ReturnStmt -> RETURN Exp SEMI | RETURN SEMI
AssignStmt -> VariableExp ASSIGN Exp SEMI


Exp ->  ArrayExp | CalExp

ArrayExp -> LEFT_BRACKET ArrayItems RIGHT_BRACKET |  LEFT_BRACKET RIGHT_BRACKET
ArrayItems -> Exp | Exp COMMA ArrayItems
ArraySub -> LEFT_BRACKET Exp RIGHT_BRACKET | ArraySub LEFT_BRACKET Exp RIGHT_BRACKET

CallExp -> IDExp LEFT_PAREN ArgumentList RIGHT_PAREN
ArgumentList -> Exp | ArgumentList COMMA Exp | E

# 可计算表达式，包括数值计算，布尔计算以及位运算
CalExp -> CalExp LogicOperator LogicExp | LogicExp
LogicOperator -> LOGIC_OR | LOGIC_AND

LogicExp -> LogicExp BitOperator BitExp | BitExp
BitOperator -> BIT_AND | BIT_OR

BitExp -> BitExp RelationalOperator  RelationExp | RelationExp
RelationalOperator -> LESS | LESS_EQUAL | EQUAL | NOT_EQUAL | GREATER | GREATER_EQUAL

RelationExp -> RelationExp AdditiveOperator AdditiveExp | AdditiveExp
AdditiveOperator -> ADD | SUB

AdditiveExp -> AdditiveExp FactorOperator FactorExp | FactorExp
FactorOperator -> MOD | DIV | MUL

FactorExp -> UnaryBeforeOperator UnaryExp | UnaryExp UnaryAfterOperator | UnaryExp
UnaryBeforeOperator -> BIT_NOT | NOT | ADD_ONE | SUB_ONE
UnaryAfterOperator -> ADD_ONE | SUB_ONE

UnaryExp -> Literal | VariableExp | LEFT_PAREN Exp RIGHT_PAREN | CallExp
Literal ->  NUMBER | STRING | TRUE | FALSE | NULL